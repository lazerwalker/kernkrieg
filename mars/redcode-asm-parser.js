module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "assembly_file": parse_assembly_file,
        "list": parse_list,
        "next_line": parse_next_line,
        "line": parse_line,
        "comment": parse_comment,
        "instruction": parse_instruction,
        "label": parse_label,
        "label_list": parse_label_list,
        "label_name": parse_label_name,
        "operation": parse_operation,
        "opcode": parse_opcode,
        "modifier": parse_modifier,
        "mode_expr": parse_mode_expr,
        "mode": parse_mode,
        "expr": parse_expr,
        "expr_op": parse_expr_op,
        "term": parse_term,
        "number": parse_number,
        "signed_integer": parse_signed_integer,
        "natural_number": parse_natural_number
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "assembly_file";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_assembly_file() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_next_line();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_list();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, l) { return l; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_list() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_line();
        if (result0 !== null) {
          result1 = parse_next_line();
          if (result1 !== null) {
            result2 = parse_list();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, l, lst) { return [l].concat(lst)})(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_line();
          if (result0 !== null) {
            result1 = parse_next_line();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, l) { return [l];})(pos0.offset, pos0.line, pos0.column, result0[0]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_next_line() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        result0 = [];
        if (input.charCodeAt(pos.offset) === 32) {
          result1 = " ";
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (input.charCodeAt(pos.offset) === 32) {
            result1 = " ";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\" \"");
            }
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 10) {
            result2 = "\n";
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\n\"");
            }
          }
          if (result2 !== null) {
            result3 = [];
            if (input.charCodeAt(pos.offset) === 32) {
              result4 = " ";
              advance(pos, 1);
            } else {
              result4 = null;
              if (reportFailures === 0) {
                matchFailed("\" \"");
              }
            }
            while (result4 !== null) {
              result3.push(result4);
              if (input.charCodeAt(pos.offset) === 32) {
                result4 = " ";
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\" \"");
                }
              }
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos1 = clone(pos);
              if (input.charCodeAt(pos.offset) === 10) {
                result2 = "\n";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\n\"");
                }
              }
              if (result2 !== null) {
                result3 = [];
                if (input.charCodeAt(pos.offset) === 32) {
                  result4 = " ";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\" \"");
                  }
                }
                while (result4 !== null) {
                  result3.push(result4);
                  if (input.charCodeAt(pos.offset) === 32) {
                    result4 = " ";
                    advance(pos, 1);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\" \"");
                    }
                  }
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_line() {
        var result0;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_comment();
        if (result0 !== null) {
          result0 = (function(offset, line, column, c) { return [[], c]})(pos1.offset, pos1.line, pos1.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos1);
        }
        if (result0 === null) {
          pos1 = clone(pos);
          result0 = parse_instruction();
          if (result0 !== null) {
            result0 = (function(offset, line, column, i) { return [i.instruction,[i.comment]]})(pos1.offset, pos1.line, pos1.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos1);
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, l) { return l; })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_comment() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 59) {
          result0 = ";";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\";\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[^\n]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^\\n]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^\n]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\n]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, cmt) { return cmt.join(""); })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_instruction() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_label();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = [];
          if (input.charCodeAt(pos.offset) === 32) {
            result2 = " ";
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\" \"");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (input.charCodeAt(pos.offset) === 32) {
              result2 = " ";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\" \"");
              }
            }
          }
          if (result1 !== null) {
            result2 = parse_operation();
            if (result2 !== null) {
              pos2 = clone(pos);
              pos3 = clone(pos);
              if (input.charCodeAt(pos.offset) === 32) {
                result3 = " ";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\" \"");
                }
              }
              if (result3 !== null) {
                result4 = [];
                if (input.charCodeAt(pos.offset) === 32) {
                  result5 = " ";
                  advance(pos, 1);
                } else {
                  result5 = null;
                  if (reportFailures === 0) {
                    matchFailed("\" \"");
                  }
                }
                while (result5 !== null) {
                  result4.push(result5);
                  if (input.charCodeAt(pos.offset) === 32) {
                    result5 = " ";
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\" \"");
                    }
                  }
                }
                if (result4 !== null) {
                  result5 = parse_mode_expr();
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, expr) {return expr;})(pos2.offset, pos2.line, pos2.column, result3[2]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                pos2 = clone(pos);
                pos3 = clone(pos);
                if (input.charCodeAt(pos.offset) === 44) {
                  result4 = ",";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\",\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  if (input.charCodeAt(pos.offset) === 32) {
                    result6 = " ";
                    advance(pos, 1);
                  } else {
                    result6 = null;
                    if (reportFailures === 0) {
                      matchFailed("\" \"");
                    }
                  }
                  while (result6 !== null) {
                    result5.push(result6);
                    if (input.charCodeAt(pos.offset) === 32) {
                      result6 = " ";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\" \"");
                      }
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_mode_expr();
                    if (result6 !== null) {
                      result4 = [result4, result5, result6];
                    } else {
                      result4 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result4 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result4 = null;
                  pos = clone(pos3);
                }
                if (result4 !== null) {
                  result4 = (function(offset, line, column, expr) {return expr;})(pos2.offset, pos2.line, pos2.column, result4[2]);
                }
                if (result4 === null) {
                  pos = clone(pos2);
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = [];
                  if (input.charCodeAt(pos.offset) === 32) {
                    result6 = " ";
                    advance(pos, 1);
                  } else {
                    result6 = null;
                    if (reportFailures === 0) {
                      matchFailed("\" \"");
                    }
                  }
                  while (result6 !== null) {
                    result5.push(result6);
                    if (input.charCodeAt(pos.offset) === 32) {
                      result6 = " ";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\" \"");
                      }
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_comment();
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, lbl, op, aoperand, boperand, cmt) { return { instruction: new Instruction(lbl,
                                                    op,
                                                    aoperand,
                                                    boperand),
                        comment: cmt }; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[3], result0[4], result0[6]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_label() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_label_list();
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 58) {
            result1 = ":";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, lbls) { return lbls; })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_label_list() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_label_name();
        if (result0 !== null) {
          pos2 = clone(pos);
          pos3 = clone(pos);
          if (input.charCodeAt(pos.offset) === 32) {
            result2 = " ";
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\" \"");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (input.charCodeAt(pos.offset) === 32) {
                result2 = " ";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\" \"");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_label_list();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos3);
            }
          } else {
            result1 = null;
            pos = clone(pos3);
          }
          if (result1 !== null) {
            result1 = (function(offset, line, column, l) { return l;})(pos2.offset, pos2.line, pos2.column, result1[1]);
          }
          if (result1 === null) {
            pos = clone(pos2);
          }
          if (result1 === null) {
            pos2 = clone(pos);
            result1 = [];
            if (input.charCodeAt(pos.offset) === 32) {
              result2 = " ";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\" \"");
              }
            }
            while (result2 !== null) {
              result1.push(result2);
              if (input.charCodeAt(pos.offset) === 32) {
                result2 = " ";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\" \"");
                }
              }
            }
            if (result1 !== null) {
              result1 = (function(offset, line, column) { return new Array(); })(pos2.offset, pos2.line, pos2.column);
            }
            if (result1 === null) {
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, lhd, lbls) { return lbls.concat([lhd]); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_label_name() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[a-zA-Z]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[a-zA-Z0-9]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA-Z0-9]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[a-zA-Z0-9]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[a-zA-Z0-9]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, lbl) { return lbl[0] + lbl[1].join(""); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_operation() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_opcode();
        if (result0 !== null) {
          pos2 = clone(pos);
          pos3 = clone(pos);
          if (input.charCodeAt(pos.offset) === 46) {
            result1 = ".";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_modifier();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos3);
            }
          } else {
            result1 = null;
            pos = clone(pos3);
          }
          if (result1 !== null) {
            result1 = (function(offset, line, column, m) {return m;})(pos2.offset, pos2.line, pos2.column, result1[1]);
          }
          if (result1 === null) {
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, opc, mod) { return { opcode: opc.toLowerCase(), modifier: mod.toLowerCase()}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_opcode() {
        var result0;
        
        if (input.substr(pos.offset, 3).toLowerCase() === "dat") {
          result0 = input.substr(pos.offset, 3);
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"dat\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 3).toLowerCase() === "mov") {
            result0 = input.substr(pos.offset, 3);
            advance(pos, 3);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"mov\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 3).toLowerCase() === "add") {
              result0 = input.substr(pos.offset, 3);
              advance(pos, 3);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"add\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 3).toLowerCase() === "sub") {
                result0 = input.substr(pos.offset, 3);
                advance(pos, 3);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"sub\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 3).toLowerCase() === "mul") {
                  result0 = input.substr(pos.offset, 3);
                  advance(pos, 3);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"mul\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 3).toLowerCase() === "div") {
                    result0 = input.substr(pos.offset, 3);
                    advance(pos, 3);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"div\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos.offset, 3).toLowerCase() === "mod") {
                      result0 = input.substr(pos.offset, 3);
                      advance(pos, 3);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"mod\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos.offset, 3).toLowerCase() === "jmp") {
                        result0 = input.substr(pos.offset, 3);
                        advance(pos, 3);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"jmp\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos.offset, 3).toLowerCase() === "jmz") {
                          result0 = input.substr(pos.offset, 3);
                          advance(pos, 3);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"jmz\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos.offset, 3).toLowerCase() === "jmn") {
                            result0 = input.substr(pos.offset, 3);
                            advance(pos, 3);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"jmn\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos.offset, 3).toLowerCase() === "djn") {
                              result0 = input.substr(pos.offset, 3);
                              advance(pos, 3);
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"djn\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.substr(pos.offset, 3).toLowerCase() === "cmp") {
                                result0 = input.substr(pos.offset, 3);
                                advance(pos, 3);
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"cmp\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.substr(pos.offset, 3).toLowerCase() === "slt") {
                                  result0 = input.substr(pos.offset, 3);
                                  advance(pos, 3);
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"slt\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.substr(pos.offset, 3).toLowerCase() === "spl") {
                                    result0 = input.substr(pos.offset, 3);
                                    advance(pos, 3);
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"spl\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.substr(pos.offset, 3).toLowerCase() === "seq") {
                                      result0 = input.substr(pos.offset, 3);
                                      advance(pos, 3);
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"seq\"");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.substr(pos.offset, 3).toLowerCase() === "sne") {
                                        result0 = input.substr(pos.offset, 3);
                                        advance(pos, 3);
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"sne\"");
                                        }
                                      }
                                      if (result0 === null) {
                                        if (input.substr(pos.offset, 3).toLowerCase() === "nop") {
                                          result0 = input.substr(pos.offset, 3);
                                          advance(pos, 3);
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"nop\"");
                                          }
                                        }
                                        if (result0 === null) {
                                          if (input.substr(pos.offset, 3).toLowerCase() === "ldp") {
                                            result0 = input.substr(pos.offset, 3);
                                            advance(pos, 3);
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"ldp\"");
                                            }
                                          }
                                          if (result0 === null) {
                                            if (input.substr(pos.offset, 3).toLowerCase() === "stp") {
                                              result0 = input.substr(pos.offset, 3);
                                              advance(pos, 3);
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"stp\"");
                                              }
                                            }
                                            if (result0 === null) {
                                              if (input.substr(pos.offset, 3).toLowerCase() === "org") {
                                                result0 = input.substr(pos.offset, 3);
                                                advance(pos, 3);
                                              } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"org\"");
                                                }
                                              }
                                              if (result0 === null) {
                                                if (input.substr(pos.offset, 3).toLowerCase() === "equ") {
                                                  result0 = input.substr(pos.offset, 3);
                                                  advance(pos, 3);
                                                } else {
                                                  result0 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"equ\"");
                                                  }
                                                }
                                                if (result0 === null) {
                                                  if (input.substr(pos.offset, 3).toLowerCase() === "end") {
                                                    result0 = input.substr(pos.offset, 3);
                                                    advance(pos, 3);
                                                  } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"end\"");
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_modifier() {
        var result0;
        
        if (input.substr(pos.offset, 2).toLowerCase() === "ab") {
          result0 = input.substr(pos.offset, 2);
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"ab\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 2).toLowerCase() === "ba") {
            result0 = input.substr(pos.offset, 2);
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"ba\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 1).toLowerCase() === "a") {
              result0 = input.substr(pos.offset, 1);
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"a\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 1).toLowerCase() === "b") {
                result0 = input.substr(pos.offset, 1);
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"b\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 1).toLowerCase() === "f") {
                  result0 = input.substr(pos.offset, 1);
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"f\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 1).toLowerCase() === "x") {
                    result0 = input.substr(pos.offset, 1);
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"x\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos.offset, 1).toLowerCase() === "i") {
                      result0 = input.substr(pos.offset, 1);
                      advance(pos, 1);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"i\"");
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_mode_expr() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_mode();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_expr();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_mode() {
        var result0;
        
        if (input.charCodeAt(pos.offset) === 35) {
          result0 = "#";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 36) {
            result0 = "$";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"$\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos.offset) === 64) {
              result0 = "@";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"@\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos.offset) === 60) {
                result0 = "<";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"<\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos.offset) === 62) {
                  result0 = ">";
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\">\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos.offset) === 42) {
                    result0 = "*";
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"*\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos.offset) === 123) {
                      result0 = "{";
                      advance(pos, 1);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"{\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos.offset) === 125) {
                        result0 = "}";
                        advance(pos, 1);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"}\"");
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_expr() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_term();
        if (result0 !== null) {
          result1 = parse_expr_op();
          if (result1 !== null) {
            result2 = parse_expr();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_term();
        }
        return result0;
      }
      
      function parse_expr_op() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        if (input.charCodeAt(pos.offset) === 32) {
          result1 = " ";
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (input.charCodeAt(pos.offset) === 32) {
            result1 = " ";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\" \"");
            }
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 42) {
            result1 = "*";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"*\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos.offset) === 47) {
              result1 = "/";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"/\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos.offset) === 43) {
                result1 = "+";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"+\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos.offset) === 45) {
                  result1 = "-";
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"-\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos.offset) === 37) {
                    result1 = "%";
                    advance(pos, 1);
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"%\"");
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result2 = [];
            if (input.charCodeAt(pos.offset) === 32) {
              result3 = " ";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\" \"");
              }
            }
            while (result3 !== null) {
              result2.push(result3);
              if (input.charCodeAt(pos.offset) === 32) {
                result3 = " ";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\" \"");
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, eop) { return eop; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_term() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 40) {
          result0 = "(";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_expr();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 41) {
              result2 = ")";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\")\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_label_name();
          if (result0 === null) {
            result0 = parse_number();
          }
        }
        return result0;
      }
      
      function parse_number() {
        var result0;
        
        result0 = parse_signed_integer();
        if (result0 === null) {
          result0 = parse_natural_number();
        }
        return result0;
      }
      
      function parse_signed_integer() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 43) {
          result0 = "+";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_natural_number();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, num) { return num; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 45) {
            result0 = "-";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_natural_number();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, num) { return -num; })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_natural_number() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[0-9]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, num) { return parseInt(num.join(""), 10); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
          var Instruction = require("./instruction.js");
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
